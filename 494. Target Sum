//C language

//dp => i: element in array we can use (0~numsSize-1), j: subset sum we want to get (0~(sum-target)/2)

int findTargetSumWays(int* nums, int numsSize, int target){
    int sum=0,subset,zero=0;
    for(int i=0;i<numsSize;++i){
        if(nums[i]==0) zero++;    //0額外處理
        else sum+=nums[i];
    }
    if((sum-target)%2!=0 || (sum-target)<0) return 0; //注意(sum-target)<0的可能性
    subset=(sum-target)/2;
    
    int dp[subset+1];
    for(int i=0;i<subset+1;++i){ //init
        dp[i]=(i==0)?1:0;    
    }
    
    for(int i=0;i<numsSize;++i){
        if(nums[i]==0) continue;
        for(int j=subset;j>0;--j){ //倒著做，因後面會用到前面被改變前的值，若順著做找前面資料時會出錯
            if(j>=nums[i]) dp[j]+=dp[j-nums[i]];
        }
    }
    
    int result=dp[subset];
    while(zero>0){
        result*=2;
        zero--;
    }
    return result;
}
