//C++

//backtracking + recursive：從1開始向前推進，若 總和大於n/數字大於9/size到k(邊界條件) 就退後
//use C++ <vector> to achieve add/delete element in an array faster instead of C

class Solution {
public:
    vector<vector<int>> result;
    
    void solve(vector<int> &comb, int start, int end, int k, int restN){
        
        //boundary condition
        if(comb.size()==k){
            if(restN==0) result.push_back(comb);
            return;
        }
        
        for(int i=start;i<=end;++i){
            if(i<=restN){
                comb.push_back(i);  //forth
                solve(comb,i+1,9,k,restN-i);
                comb.pop_back();  //back
            } 
        }
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> comb;
        solve(comb,1,9,k,n);
        return result;
    }
};

//ex: k=3 n=7
// []
// [1]
// [1,2]
// [1,2,3]
// [1,2,4]
// [1,3]
// [1,4]
// [1,5]
// [1,6]
// [2]
// [2,3]
// [2,4]
// [2,5]
// [3]
// [3,4]
// [4]
// [5]
// [6]
// [7]
