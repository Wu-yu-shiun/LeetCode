//C++

// 方法一：bitmask
// 將字串中的26種不同字元，轉換成二進位的獨立一個位數來表示，也代表了給了此字串的id
// 用｜的方式對不同的字元做加總，可以忽略掉單一字串中重複出現的字元
// 當兩個字串截然不同時，他們hash出的結果用 & 的方式做比較，便不會有任何位元相同

class Solution {
public:
    int maxProduct(vector<string>& words) {
        int result=0;       
        vector<int> bitmask(words.size());
        
        for(int i=0;i<words.size();++i){  
            //hash the word:每個字元進行給予相對應的位元位置後做OR，形成該字串的id
            for(char c:words[i])
                bitmask[i]|=1<<(c-'a');
                  
            //檢查hash結果:若id在進行位元運算AND時發現不為0，代表有位數兩者皆1，兩字串有相同字元
            for(int j=0;j<i;++j)
                if((bitmask[i]&bitmask[j])==0) 
                    result=max(result,int(words[i].length()*words[j].length()));
        }   

        return result;
    }
};

// hashing process ex: ["abcw","baz","foo","bar","xtfn","abcdef"]
// "abcw"    => mask[0]: 0->1->3->7->4194311
// "baz"     => mask[1]: 0->2->3->33554435
// "foo"     => mask[2]: 0->32->16416->16416
// "bar"     => mask[3]: 0->2->3->131075
// "xtfn"    => mask[4]: 0->8388608->8912896->8912928->8921120
// "abcdef"  => mask[5]: 0->1->3->7->15->31->63
