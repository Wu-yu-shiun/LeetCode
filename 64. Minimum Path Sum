//C language

int min(int a,int b){
    if(a<=b) return a;
    else return b;
}

int minPathSum(int** grid, int gridSize, int* gridColSize){
    int dp[gridSize][gridColSize[0]];
    int firstRowSum=grid[0][0],firstColSum=grid[0][0];
    
    //dp:第一排第一列初始化(累加)，其餘(上,左)取最小值＋當前值
    for(int i=0;i<gridSize;++i){
        for(int j=0;j<gridColSize[0];++j){
            if(i==0 && j==0) dp[i][j]=grid[i][j];
            else if(i==0){
                firstRowSum+=grid[i][j];
                dp[i][j]=firstRowSum;
            }
            else if(j==0){
                firstColSum+=grid[i][j];
                dp[i][j]=firstColSum;
            }
            else dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
        }
    }
    
    return dp[gridSize-1][gridColSize[0]-1];
}

//------------------------------------------------------------------------

//優化：迴圈由左而右，再由上而下，只需紀錄上一個row和左邊一個初始值
int minPathSum(int** grid, int gridSize, int* gridColSize){ 
    int dp[gridColSize[0]],firstCol=0;
    memset(dp,0,sizeof(int)*gridColSize[0]);
    for(int i=0;i<gridSize;++i){
        for(int j=0;j<gridColSize[0];++j){
            if(j==0){
                firstCol+=grid[i][j];
                dp[j]=firstCol;
            }
            else if(i==0) dp[j]=dp[j-1]+grid[i][j];
            else dp[j]=min(dp[j],dp[j-1])+grid[i][j];
        }
    }
    return dp[gridColSize[0]-1];
}
