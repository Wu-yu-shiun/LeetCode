//python

class Solution(object):
    def findAllPeople(self, n, meetings, firstPerson):
        secret=[False]*n
        secret[0]=secret[firstPerson]=True

        meetings=sorted(meetings,key=itemgetter(2)) #根據時間將meeting排序
        meetings=groupby(meetings,key=itemgetter(2)) #將同樣時間的分成同組
        for key,group in meetings:
            # print("Key: %s, Group: %s" % (key, [item for item in group]))
            uf=UnionFind()
            for x,y,time in group:
                uf.union(x,y) if secret[uf.find(x)] else uf.union(y,x)
            # for key, value in uf.p.items():
            #     print("%s: %s" % (key, value))
            for person in uf:
                secret[person]=secret[uf.find(person)]
    
        result=[]
        for i in range(n):
            if secret[i] is True:
                result.append(i)
        return result

class UnionFind:
    def __init__(self):
        self.p={} # dict=>[key:value]為[node(b的根):parent(a的根)]
    
    def union(self,a,b): # 把"b的根"接到"a的根"之下
        self.p[self.find(b)]=self.find(a)
    
    def find(self,e): # 用find with path compression
        p=self.p.get(e,e) # 若找不到parent則自己當parent
        if e!=p:
            p=self.p[e]=self.find(p)
        return p
    
    def __iter__(self):  # 使union&find這個資料結構可供遍歷
        return iter(self.p)
