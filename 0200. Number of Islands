//C language

//dfs
void check(char** grid, int rowSize, int colSize, int row, int column){
    if(grid[row][column]=='1'){
        grid[row][column]='0'; //算過後改為0避免重複計算
        if(column-1>=0) check(grid,rowSize,colSize,row,column-1);
        if(column+1<colSize) check(grid,rowSize,colSize,row,column+1);
        if(row-1>=0) check(grid,rowSize,colSize,row-1,column);
        if(row+1<rowSize) check(grid,rowSize,colSize,row+1,column);
    }
}

int numIslands(char** grid, int gridSize, int* gridColSize){
    int result=0;
    for(int i=0;i<gridSize;++i){
        for(int j=0;j<gridColSize[i];++j){ //注意用gridColSize[...]，而非gridColSize
            if(grid[i][j]=='1'){
                check(grid,gridSize,gridColSize[i],i,j);
                result++;
            }    
        }
    }
    return result;
}

//python

class Solution(object):
    def numIslands(self, grid):
        def dfs(grid, now_i, now_j):
            grid[now_i][now_j]="0"
            if now_i-1>=0 and grid[now_i-1][now_j]=="1": # 可往上走
                dfs(grid,now_i-1,now_j)
            if now_i+1<=len(grid)-1 and grid[now_i+1][now_j]=="1": # 可往下走
                dfs(grid,now_i+1,now_j)
            if now_j-1>=0 and grid[now_i][now_j-1]=="1": # 可往左走
                dfs(grid,now_i,now_j-1)
            if now_j+1<=len(grid[0])-1 and grid[now_i][now_j+1]=="1": # 可往右走
                dfs(grid,now_i,now_j+1)
            return

        result=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=="1":
                    result+=1
                    dfs(grid,i,j) # 把該點可以通到的所以點走完(同時1->0)
        return result
